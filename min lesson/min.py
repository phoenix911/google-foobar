def answer(words):    graph = build_graph(words)    start = start_nodes(graph)    letters = []    visited = []    def visit(node):        if node not in visited:            visited.append(node)            if node in graph:                for edge in graph[node]:                    visit(edge)            letters.append(node)    for node in start:        visit(node)    return ''.join(letters[::-1])def build_graph(words):    graph = {}    rows = len(words)    for row in range(rows - 1):        edge = find_edge(words[row], words[row + 1])        if edge is not None:            node, direction = edge            if node in graph:                graph[node].append(direction)            else:                graph[node] = [direction]    return graphdef find_edge(a, b):    length = min(len(a), len(b))    for c in range(length):        if a[c] != b[c]:            return a[c], b[c]def start_nodes(graph):    e = set()    for edges in graph.values():        for edge in edges:            e.add(edge)    s = set()    for node in graph:        if node not in e:            s.add(node)    return s